lokstat.py takes an output file from locktrace and produces a textual report.

usage: lockstat.py [-h] [-p PID] [-e EVENT] [-s SORT_BY] [-g GROUP_BY]
                   [-C COLUMNS] [-c] [-H]
                   tracefile

Display aggregate lock stats in a tabular format

positional arguments:
  tracefile             tracefile generated by locktrace

optional arguments:
  -h, --help            show this help message and exit
  -p PID, --pid PID     Show stats for this pid only
  -e EVENT, --event EVENT
                        Show locks (lock), conditional waits (cond) or both
                        (all)
  -s SORT_BY, --sort-by SORT_BY
                        Sort by this column
  -g GROUP_BY, --group-by GROUP_BY
                        Group by lock, stack, comm or tid
  -C COLUMNS, --columns COLUMNS
                        Include these columns. See list of column names below.
                        Default=blocked.count,blocked.sum,sys.sum,lock,lock.co
                        unt,tid.count,stack.count
  -c, --callstacks      Display full callstacks
  -H, --max-hold-times  Show max hold time column and callstack of waker

Available columns:
blocked.(sum|count|max|avg) - Time / count blocked (sleeping) on a lock
sys.(sum|count|max|avg) - Time / count executing in sys_futex
lock(.count) - Top lock address / number of locks
tid(.count) - Top tid / number of tids
comm(.count) - Thread name
stack - Callstack
stack.count - Number of callers
hold_stack - Wake callstack of longest lock holders
locked_sleep.(sum|count) - Time / count sleeping with lock held

EXAMPLES:
lockstat.py file
        Read csv file and display list of most contended locks for each process
lockstat.py -p <pid> file
        Display stats only for given pid
lockstat.py -C blocked.sum,tid.count,lock file
        Show these columns only.
lockstat.py -g comm -s blocked.max file
        Group by thread name and sort by max block time
lockstat.py -g stack -c file
        Group by callstack and show full stacks


Here is an example Output:
$ # Trace pid 591905 for 3 seconds
$ locktrace -p 591905 3 > locks.csv
$ # Since -p was specified for locktrace, we don't need to specify it on lockstat
$ lockstat.py locks.csv

 Summary for tailer (591905):
 ----------------------------------------

 Observed threads:                  1220
 Observed locks:                    342
 Observed comms:                    37
 Sys_futex calls:                   375067 (191235/131344/183832 wait/blk/wake)
 Sys_futex_calls (locks):           249867 (66035/31698/183832 wait/blk/wake)
 Sys_futex_calls (other):           125200 (125200/99646/0 wait/blk/wake)
   (cond waits / semaphores / etc)
 Runtime:                           40s (12s sys, 3s wall clock)
 Blocked on locks:                  14s (26% of (run+block))
 Executing locks:                   2496ms (6% of run, 490ms usr, 2006ms sys)
 Executing usr atomics:             0ms (0% of run)
 Waiting on cond var:               227s (81% of (run+block+wait))
 Sampled vs. timestamps futex:      610ms vs 962ms and 560 vs 1044ms lock/cond
 Tracing overhead:                  290ms (1%/run)
 Pre-empted:                        N/A (N/A/run + preempt)

 Blocked This Cuml Blocked SysFutx TIDs Callers Lock Address       Caller
  Sum ms    %    %       #  Sum ms    #       #
 -----------------------------------------------------------------------------------------------------------
   10548   77   77   18594     642   72       4     0x7fc75b14d750 apache::thrift::concurrency::Mutex::lock() const <-- TailerWorker::run()
     780    6   83       1       0    2       2     0x7fc72806c840 folly::detail::SingleElementQueue<>::dequeueImpl() <-- scribe::ScribeClient::send()
     632    5   87       1       0    2       2     0x7fc72806cb20 folly::detail::SingleElementQueue<>::dequeueImpl() <-- scribe::ScribeClient::send()
     341    2   90       1       0    2       2     0x7fc72806cc90 folly::detail::SingleElementQueue<>::dequeueImpl() <-- scribe::ScribeClient::send()
     315    2   92   12136     164   72       4     0x7fc75d718530 TailerWorker::run() <-- apache::thrift::concurrency::PthreadThread::threadMain()
     311    2   94       1       0    2       2     0x7fc72806d0e0 folly::detail::SingleElementQueue<>::dequeueImpl() <-- scribe::ScribeClient::send()
     269    2   96       1       0    2       2     0x7fc72806d250 folly::detail::SingleElementQueue<>::dequeueImpl() <-- scribe::ScribeClient::send()
